{"version":3,"sources":["Components/ProjectItem.js","Components/Projects.js","Components/AddProject.js","Components/TodoItem.js","Components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["ProjectItem","id","this","props","onDelete","react_default","a","createElement","className","project","title","category","onClick","deleteProject","bind","Component","Projects","projectItems","_this","projects","map","Components_ProjectItem","key","AddProject","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","newProject","e","refs","value","alert","setState","uuid","v4","addProject","preventDefault","categoryOptions","categories","onSubmit","handleSubmit","type","ref","defaultProps","TodoItem","todo","Todos","todoItems","todos","Components_TodoItem","App","$","ajax","url","dataType","cache","success","data","console","log","error","xhr","status","err","getProjects","getToDos","push","index","findIndex","x","splice","Components_AddProject","handleAddProject","Components_Projects","handleDeleteProject","Components_Todos","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAwBeA,wLAnBGC,GACVC,KAAKC,MAAMC,SAASH,oCAIxB,OACEI,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACZH,EAAAC,EAAAC,cAAA,cAASL,KAAKC,MAAMM,QAAQC,OAD9B,KACgDR,KAAKC,MAAMM,QAAQE,SACjEN,EAAAC,EAAAC,cAAA,UAAQK,QAASV,KAAKW,cAAcC,KAAKZ,KAAMA,KAAKC,MAAMM,QAAQR,KAAlE,aATkBc,aC8BXC,wLA5BGf,GACVC,KAAKC,MAAMC,SAASH,oCAGf,IACLgB,EADKC,EAAAhB,KAUT,OARGA,KAAKC,MAAMgB,WACZF,EAAef,KAAKC,MAAMgB,SAASC,IAAI,SAAAX,GAEjC,OACIJ,EAAAC,EAAAC,cAACc,EAAD,CAAajB,SAAUc,EAAKL,cAAcC,KAAKI,GAAOI,IAAKb,EAAQC,MAAOD,QAASA,OAK7FJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,mBACGS,UAlBcF,aCAjBQ,cACF,SAAAA,IAAa,IAAAL,EAAA,OAAAM,OAAAC,EAAA,EAAAD,CAAAtB,KAAAqB,IACTL,EAAAM,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA1B,QACK2B,MAAQ,CACTC,WAAW,IAHNZ,4EAWAa,GACoB,KAA1B7B,KAAK8B,KAAKtB,MAAMuB,MACfC,MAAM,8CAENhC,KAAKiC,SAAS,CAACL,WAAW,CACtB7B,GAAImC,IAAKC,KACT3B,MAAOR,KAAK8B,KAAKtB,MAAMuB,MACvBtB,SAAUT,KAAK8B,KAAKrB,SAASsB,QAC7B,WAEA/B,KAAKC,MAAMmC,WAAWpC,KAAK2B,MAAMC,cAGzCC,EAAEQ,kDAIN,IAAIC,EAAkBtC,KAAKC,MAAMsC,WAAWrB,IAAI,SAAAT,GAC5C,OAAON,EAAAC,EAAAC,cAAA,UAAQe,IAAKX,EAAUsB,MAAOtB,GAAWA,KAEpD,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,mCACAH,EAAAC,EAAAC,cAAA,QAAMmC,SAAUxC,KAAKyC,aAAa7B,KAAKZ,OACnCG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,kBAAjB,WAAiDH,EAAAC,EAAAC,cAAA,WACjDF,EAAAC,EAAAC,cAAA,SAAOqC,KAAK,OAAOC,IAAI,WAE3BxC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAjB,YAAmDH,EAAAC,EAAAC,cAAA,WACnDF,EAAAC,EAAAC,cAAA,UAAQsC,IAAI,YACPL,IAGTnC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAAQoC,KAAK,SAASX,MAAM,WAC7C5B,EAAAC,EAAAC,cAAA,oBAhDaQ,aAAnBQ,EAQKuB,aAAe,CAClBL,WAAY,CAAC,aAAc,kBAAmB,uBAmDvClB,QC/CAwB,mLAZX,OACE1C,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACZH,EAAAC,EAAAC,cAAA,cAASL,KAAKC,MAAM6C,KAAKtC,eAJVK,aCwBRkC,mLArBX,IAAIC,EAQJ,OAPGhD,KAAKC,MAAMgD,QACZD,EAAYhD,KAAKC,MAAMgD,MAAM/B,IAAI,SAAA4B,GAC3B,OACI3C,EAAAC,EAAAC,cAAC6C,EAAD,CAAU9B,IAAK0B,EAAKtC,MAAOsC,KAAMA,OAK3C3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,iCACG2C,UAbWnC,aCoFLsC,qBA/EX,SAAAA,IAAa,IAAAnC,EAAA,OAAAM,OAAAC,EAAA,EAAAD,CAAAtB,KAAAmD,IACTnC,EAAAM,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAA6B,GAAAzB,KAAA1B,QACK2B,MAAQ,CACTV,SAAU,GACVgC,MAAQ,IAJHjC,0EASToC,IAAEC,KAAK,CACHC,IAAK,6CACLC,SAAU,OACVC,OAAO,EACPC,QAAS,SAASC,GACd1D,KAAKiC,SAAS,CAACgB,MAAOS,GAAO,WACzBC,QAAQC,IAAI5D,KAAK2B,UAEvBf,KAAKZ,MACP6D,MAAO,SAASC,EAAKC,EAAQC,GACzBL,QAAQC,IAAII,4CAMpBhE,KAAKiC,SAAS,CAAChB,SAAU,CACrB,CACIlB,GAAImC,IAAKC,KACT3B,MAAO,mBACPC,SAAU,cAEd,CACIV,GAAImC,IAAKC,KACT3B,MAAO,aACPC,SAAU,sBAEd,CACIV,GAAImC,IAAKC,KACT3B,MAAO,eACPC,SAAU,mEAMlBT,KAAKiE,cACLjE,KAAKkE,uDAILlE,KAAKkE,oDAGQ3D,GACb,IAAIU,EAAWjB,KAAK2B,MAAMV,SAC1BA,EAASkD,KAAK5D,GACdP,KAAKiC,SAAS,CAAChB,SAASA,gDAGRlB,GAChB,IAAIkB,EAAWjB,KAAK2B,MAAMV,SACtBmD,EAAQnD,EAASoD,UAAU,SAAAC,GAAC,OAAIA,EAAEvE,KAAOA,IAC7CkB,EAASsD,OAAOH,EAAO,GACvBpE,KAAKiC,SAAS,CAAChB,SAASA,qCAK5B,OADA0C,QAAQC,IAAI5D,KAAKC,OAEfE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmE,EAAD,CAAYpC,WAAYpC,KAAKyE,iBAAiB7D,KAAKZ,QACnDG,EAAAC,EAAAC,cAACqE,EAAD,CAAUzD,SAAUjB,KAAK2B,MAAMV,SAAUf,SAAUF,KAAK2E,oBAAoB/D,KAAKZ,QACjFG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACuE,EAAD,cA1EU/D,cCGEgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhF,EAAAC,EAAAC,cAAC+E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.23021a3a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n\r\nclass ProjectItem extends Component {\r\n    deleteProject(id){\r\n        this.props.onDelete(id);\r\n    }\r\n\r\n    render() {\r\n    return (\r\n      <li className=\"Project\">\r\n        <strong>{this.props.project.title}</strong>: {this.props.project.category}\r\n        <button onClick={this.deleteProject.bind(this, this.props.project.id)}>x</button>\r\n      </li>\r\n    );\r\n    }\r\n}\r\n\r\n// ProjectItem.propTypes = {\r\n//     project: React.PropTypes.object,\r\n//     onDelete: React.PropTypes.func\r\n// }\r\n\r\nexport default ProjectItem;\r\n\r\n// <a href=\"#\" onClick={this.deleteProject.bind(this, this.props.project.id)}>X</a>\r\n","import React, { Component } from 'react';\r\nimport ProjectItem from './ProjectItem';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n\r\nclass Projects extends Component {\r\n    deleteProject(id){\r\n        this.props.onDelete(id);\r\n    }\r\n\r\n    render() {\r\n    let projectItems;\r\n    if(this.props.projects){\r\n      projectItems = this.props.projects.map(project => {\r\n            // console.log(project);\r\n            return (\r\n                <ProjectItem onDelete={this.deleteProject.bind(this)} key={project.title} project={project} />\r\n            );\r\n        });\r\n    }\r\n    return (\r\n      <div className=\"Projects\">\r\n      <h3 className=\"latest-projects\">Latest Projects</h3>\r\n        {projectItems}\r\n      </div>\r\n    );\r\n    }\r\n}\r\n\r\n// Projects.propTypes = {\r\n//     projects: React.PropTypes.array,\r\n//     onDelete: React.PropTypes.func\r\n// }\r\n\r\nexport default Projects;\r\n","import React, { Component } from 'react';\r\nimport uuid from 'uuid';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n\r\nclass AddProject extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            newProject:{}\r\n        }\r\n    }\r\n\r\n    static defaultProps = {\r\n        categories: ['Web Design', 'Web Development', 'Mobile Development']\r\n    }\r\n\r\n    handleSubmit(e){\r\n        if(this.refs.title.value === '' ){\r\n            alert('Add a project name to continue submission.');\r\n        } else {\r\n            this.setState({newProject:{\r\n                id: uuid.v4(),\r\n                title: this.refs.title.value,\r\n                category: this.refs.category.value\r\n            }}, function(){\r\n                // console.log(this.state);\r\n                this.props.addProject(this.state.newProject);\r\n            });\r\n        }\r\n        e.preventDefault();\r\n    }\r\n\r\n    render() {\r\n    let categoryOptions = this.props.categories.map(category => {\r\n        return <option key={category} value={category}>{category}</option>\r\n    });\r\n    return (\r\n      <div>\r\n        <h3 className=\"add-project\">Add Project To List By Category</h3>\r\n        <form onSubmit={this.handleSubmit.bind(this)}>\r\n            <div>\r\n                <label className=\"labels project\">Project</label><br />\r\n                <input type=\"text\" ref=\"title\" />\r\n            </div>\r\n            <div>\r\n                <label className=\"labels category\">Category</label><br />\r\n                <select ref=\"category\">\r\n                    {categoryOptions}\r\n                </select>\r\n            </div>\r\n            <br />\r\n            <input className=\"submit\"type=\"submit\" value=\"submit\" />\r\n            <br />\r\n        </form>\r\n      </div>\r\n    );\r\n    }\r\n}\r\n\r\n// AddProject.propTypes = {\r\n//     categories: React.PropTypes.array,\r\n//     addProject: React.PropTypes.func\r\n// }\r\n\r\nexport default AddProject;\r\n","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n\r\nclass TodoItem extends Component {\r\n    render() {\r\n    return (\r\n      <li className=\"Todo\">\r\n        <strong>{this.props.todo.title}</strong>\r\n      </li>\r\n    );\r\n    }\r\n}\r\n\r\n// TodoItem.propTypes = {\r\n//     todo: React.PropTypes.object\r\n// }\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n\r\nclass Todos extends Component {\r\n    render() {\r\n    let todoItems;\r\n    if(this.props.todos){\r\n      todoItems = this.props.todos.map(todo => {\r\n            return (\r\n                <TodoItem key={todo.title} todo={todo} />\r\n            );\r\n        });\r\n    }\r\n    return (\r\n      <div className=\"Todos\">\r\n      <h3>A Simple To Do List</h3>\r\n        {todoItems}\r\n      </div>\r\n    );\r\n    }\r\n}\r\n\r\n// Todos.propTypes = {\r\n//     todos: React.PropTypes.array\r\n// }\r\n\r\nexport default Todos;\r\n","import React, { Component } from 'react';\r\nimport uuid from 'uuid';\r\nimport $ from 'jquery';\r\nimport Projects from './Components/Projects';\r\nimport AddProject from './Components/AddProject';\r\nimport Todos from './Components/Todos';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            projects: [],\r\n            todos:  []\r\n        }\r\n    }\r\n\r\n    getToDos(){\r\n        $.ajax({\r\n            url: 'https://jsonplaceholder.typicode.com/todos',\r\n            dataType: 'json',\r\n            cache: false,\r\n            success: function(data){\r\n                this.setState({todos: data}, function(){\r\n                    console.log(this.state);\r\n                });\r\n            }.bind(this),\r\n            error: function(xhr, status, err){\r\n                console.log(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    getProjects(){\r\n        this.setState({projects: [\r\n            {\r\n                id: uuid.v4(),\r\n                title: 'Business Website',\r\n                category: 'Web Design'\r\n            },\r\n            {\r\n                id: uuid.v4(),\r\n                title: 'Social App',\r\n                category: 'Mobile Development'\r\n            },\r\n            {\r\n                id: uuid.v4(),\r\n                title: 'Contact Form',\r\n                category: 'Web Development'\r\n            }\r\n        ]});\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.getProjects();\r\n        this.getToDos();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getToDos();\r\n    }\r\n\r\n    handleAddProject(project){\r\n        let projects = this.state.projects;\r\n        projects.push(project);\r\n        this.setState({projects:projects});\r\n    }\r\n\r\n    handleDeleteProject(id){\r\n        let projects = this.state.projects;\r\n        let index = projects.findIndex(x => x.id === id);\r\n        projects.splice(index, 1);\r\n        this.setState({projects:projects});\r\n    }\r\n\r\n    render() {\r\n    console.log(this.props);\r\n    return (\r\n      <div className=\"App\">\r\n        <AddProject addProject={this.handleAddProject.bind(this)} />\r\n        <Projects projects={this.state.projects} onDelete={this.handleDeleteProject.bind(this)} />\r\n        <hr />\r\n        <Todos />\r\n      </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}