{"version":3,"sources":["logo.svg","Components/ProjectItem.js","Components/Projects.js","Components/AddProject.js","Components/TodoItem.js","Components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProjectItem","id","this","props","onDelete","className","project","title","category","onClick","deleteProject","bind","Component","Projects","projectItems","projects","map","key","AddProject","state","newProject","e","refs","value","alert","setState","uuid","v4","addProject","preventDefault","categoryOptions","categories","onSubmit","handleSubmit","type","ref","defaultProps","TodoItem","todo","Todos","todoItems","todos","App","$","ajax","url","dataType","cache","success","data","console","log","error","xhr","status","err","getProjects","getToDos","push","index","findIndex","x","splice","handleAddProject","handleDeleteProject","src","logo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,sOCwB5BC,E,sLAnBGC,GACVC,KAAKC,MAAMC,SAASH,K,+BAIxB,OACE,wBAAII,UAAU,WACZ,gCAASH,KAAKC,MAAMG,QAAQC,OAD9B,KACgDL,KAAKC,MAAMG,QAAQE,SACjE,4BAAQC,QAASP,KAAKQ,cAAcC,KAAKT,KAAMA,KAAKC,MAAMG,QAAQL,KAAlE,U,GATkBW,aC8BXC,E,sLA5BGZ,GACVC,KAAKC,MAAMC,SAASH,K,+BAGd,IACNa,EADK,OAUT,OARGZ,KAAKC,MAAMY,WACZD,EAAeZ,KAAKC,MAAMY,SAASC,KAAI,SAAAV,GAEjC,OACI,kBAAC,EAAD,CAAaF,SAAU,EAAKM,cAAcC,KAAK,GAAOM,IAAKX,EAAQC,MAAOD,QAASA,QAK7F,yBAAKD,UAAU,YACf,wBAAIA,UAAU,mBAAd,mBACGS,O,GAlBcF,aCAjBM,E,YACF,aAAc,IAAD,8BACT,+CACKC,MAAQ,CACTC,WAAW,IAHN,E,0EAWAC,GACoB,KAA1BnB,KAAKoB,KAAKf,MAAMgB,MACfC,MAAM,8CAENtB,KAAKuB,SAAS,CAACL,WAAW,CACtBnB,GAAIyB,IAAKC,KACTpB,MAAOL,KAAKoB,KAAKf,MAAMgB,MACvBf,SAAUN,KAAKoB,KAAKd,SAASe,SAC7B,WACArB,KAAKC,MAAMyB,WAAW1B,KAAKiB,MAAMC,eAGzCC,EAAEQ,mB,+BAIN,IAAIC,EAAkB5B,KAAKC,MAAM4B,WAAWf,KAAI,SAAAR,GAC5C,OAAO,4BAAQS,IAAKT,EAAUe,MAAOf,GAAWA,MAEpD,OACE,6BACE,wBAAIH,UAAU,eAAd,cACA,uBAAGA,UAAU,eAAb,oPACA,0BAAM2B,SAAU9B,KAAK+B,aAAatB,KAAKT,OACnC,6BACI,2BAAOG,UAAU,kBAAjB,WAAiD,6BACjD,2BAAO6B,KAAK,OAAOC,IAAI,WAE3B,6BACI,2BAAO9B,UAAU,mBAAjB,YAAmD,6BACnD,4BAAQ8B,IAAI,YACPL,IAGT,6BACA,2BAAOzB,UAAU,SAAQ6B,KAAK,SAASX,MAAM,WAC7C,mC,GAhDaX,aAAnBM,EAQKkB,aAAe,CAClBL,WAAY,CAAC,aAAc,kBAAmB,uBA8CvCb,QC1CAmB,E,iLAZX,OACE,wBAAIhC,UAAU,QACZ,gCAASH,KAAKC,MAAMmC,KAAK/B,Y,GAJVK,aCwBR2B,E,iLArBX,IAAIC,EAQJ,OAPGtC,KAAKC,MAAMsC,QACZD,EAAYtC,KAAKC,MAAMsC,MAAMzB,KAAI,SAAAsB,GAC3B,OACI,kBAAC,EAAD,CAAUrB,IAAKqB,EAAK/B,MAAO+B,KAAMA,QAK3C,yBAAKjC,UAAU,SACf,kEACGmC,O,GAbW5B,a,iBCqFL8B,G,kBAhFX,aAAc,IAAD,8BACT,+CACKvB,MAAQ,CACTJ,SAAU,GACV0B,MAAQ,IAJH,E,wEASTE,IAAEC,KAAK,CACHC,IAAK,6CACLC,SAAU,OACVC,OAAO,EACPC,QAAS,SAASC,GACd/C,KAAKuB,SAAS,CAACgB,MAAOQ,IAAO,WACzBC,QAAQC,IAAIjD,KAAKiB,WAEvBR,KAAKT,MACPkD,MAAO,SAASC,EAAKC,EAAQC,GACzBL,QAAQC,IAAII,Q,oCAMpBrD,KAAKuB,SAAS,CAACV,SAAU,CACrB,CACId,GAAIyB,IAAKC,KACTpB,MAAO,mBACPC,SAAU,cAEd,CACIP,GAAIyB,IAAKC,KACTpB,MAAO,aACPC,SAAU,sBAEd,CACIP,GAAIyB,IAAKC,KACTpB,MAAO,eACPC,SAAU,wB,2CAMlBN,KAAKsD,cACLtD,KAAKuD,a,0CAILvD,KAAKuD,a,uCAGQnD,GACb,IAAIS,EAAWb,KAAKiB,MAAMJ,SAC1BA,EAAS2C,KAAKpD,GACdJ,KAAKuB,SAAS,CAACV,SAASA,M,0CAGRd,GAChB,IAAIc,EAAWb,KAAKiB,MAAMJ,SACtB4C,EAAQ5C,EAAS6C,WAAU,SAAAC,GAAC,OAAIA,EAAE5D,KAAOA,KAC7Cc,EAAS+C,OAAOH,EAAO,GACvBzD,KAAKuB,SAAS,CAACV,SAASA,M,+BAK5B,OADAmC,QAAQC,IAAIjD,KAAKC,OAEf,yBAAKE,UAAU,OACb,kBAAC,EAAD,CAAYuB,WAAY1B,KAAK6D,iBAAiBpD,KAAKT,QACnD,kBAAC,EAAD,CAAUa,SAAUb,KAAKiB,MAAMJ,SAAUX,SAAUF,KAAK8D,oBAAoBrD,KAAKT,QACjF,6BACA,kBAAC,EAAD,MACA,yBAAK+D,IAAKC,IAAM7D,UAAU,kB,GA3EhBO,cCGEuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b513daad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n\r\nclass ProjectItem extends Component {\r\n    deleteProject(id){\r\n        this.props.onDelete(id);\r\n    }\r\n\r\n    render() {\r\n    return (\r\n      <li className=\"Project\">\r\n        <strong>{this.props.project.title}</strong>: {this.props.project.category}\r\n        <button onClick={this.deleteProject.bind(this, this.props.project.id)}>x</button>\r\n      </li>\r\n    );\r\n    }\r\n}\r\n\r\n// ProjectItem.propTypes = {\r\n//     project: React.PropTypes.object,\r\n//     onDelete: React.PropTypes.func\r\n// }\r\n\r\nexport default ProjectItem;\r\n\r\n// <a href=\"#\" onClick={this.deleteProject.bind(this, this.props.project.id)}>X</a>\r\n","import React, { Component } from 'react';\r\nimport ProjectItem from './ProjectItem';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n\r\nclass Projects extends Component {\r\n    deleteProject(id){\r\n        this.props.onDelete(id);\r\n    }\r\n\r\n    render() {\r\n    let projectItems;\r\n    if(this.props.projects){\r\n      projectItems = this.props.projects.map(project => {\r\n            // console.log(project);\r\n            return (\r\n                <ProjectItem onDelete={this.deleteProject.bind(this)} key={project.title} project={project} />\r\n            );\r\n        });\r\n    }\r\n    return (\r\n      <div className=\"Projects\">\r\n      <h3 className=\"latest-projects\">Latest Projects</h3>\r\n        {projectItems}\r\n      </div>\r\n    );\r\n    }\r\n}\r\n\r\n// Projects.propTypes = {\r\n//     projects: React.PropTypes.array,\r\n//     onDelete: React.PropTypes.func\r\n// }\r\n\r\nexport default Projects;\r\n","import React, { Component } from 'react';\r\nimport uuid from 'uuid';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n\r\nclass AddProject extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            newProject:{}\r\n        }\r\n    }\r\n\r\n    static defaultProps = {\r\n        categories: ['Web Design', 'Web Development', 'Mobile Development']\r\n    }\r\n\r\n    handleSubmit(e){\r\n        if(this.refs.title.value === '' ){\r\n            alert('Add a project name to continue submission.');\r\n        } else {\r\n            this.setState({newProject:{\r\n                id: uuid.v4(),\r\n                title: this.refs.title.value,\r\n                category: this.refs.category.value\r\n            }}, function(){\r\n                this.props.addProject(this.state.newProject);\r\n            });\r\n        }\r\n        e.preventDefault();\r\n    }\r\n\r\n    render() {\r\n    let categoryOptions = this.props.categories.map(category => {\r\n        return <option key={category} value={category}>{category}</option>\r\n    });\r\n    return (\r\n      <div>\r\n        <h3 className=\"add-project\">To Do List</h3>\r\n        <p className=\"description\">Try it out! Add a project to this To Do List and select an appropriate category for it. Then, click SUBMIT to add it to the Latest Projects List. You can also remove projects from the Latest Projects List by clicking on the X marked button.</p>\r\n        <form onSubmit={this.handleSubmit.bind(this)}>\r\n            <div>\r\n                <label className=\"labels project\">Project</label><br />\r\n                <input type=\"text\" ref=\"title\" />\r\n            </div>\r\n            <div>\r\n                <label className=\"labels category\">Category</label><br />\r\n                <select ref=\"category\">\r\n                    {categoryOptions}\r\n                </select>\r\n            </div>\r\n            <br />\r\n            <input className=\"submit\"type=\"submit\" value=\"submit\" />\r\n            <br />\r\n        </form>\r\n      </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default AddProject;\r\n","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n\r\nclass TodoItem extends Component {\r\n    render() {\r\n    return (\r\n      <li className=\"Todo\">\r\n        <strong>{this.props.todo.title}</strong>\r\n      </li>\r\n    );\r\n    }\r\n}\r\n\r\n// TodoItem.propTypes = {\r\n//     todo: React.PropTypes.object\r\n// }\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n\r\nclass Todos extends Component {\r\n    render() {\r\n    let todoItems;\r\n    if(this.props.todos){\r\n      todoItems = this.props.todos.map(todo => {\r\n            return (\r\n                <TodoItem key={todo.title} todo={todo} />\r\n            );\r\n        });\r\n    }\r\n    return (\r\n      <div className=\"Todos\">\r\n      <h3>A Simple To Do List Built in React</h3>\r\n        {todoItems}\r\n      </div>\r\n    );\r\n    }\r\n}\r\n\r\n// Todos.propTypes = {\r\n//     todos: React.PropTypes.array\r\n// }\r\n\r\nexport default Todos;\r\n","import React, { Component } from 'react';\r\nimport uuid from 'uuid';\r\nimport $ from 'jquery';\r\nimport Projects from './Components/Projects';\r\nimport AddProject from './Components/AddProject';\r\nimport Todos from './Components/Todos';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            projects: [],\r\n            todos:  []\r\n        }\r\n    }\r\n\r\n    getToDos(){\r\n        $.ajax({\r\n            url: 'https://jsonplaceholder.typicode.com/todos',\r\n            dataType: 'json',\r\n            cache: false,\r\n            success: function(data){\r\n                this.setState({todos: data}, function(){\r\n                    console.log(this.state);\r\n                });\r\n            }.bind(this),\r\n            error: function(xhr, status, err){\r\n                console.log(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    getProjects(){\r\n        this.setState({projects: [\r\n            {\r\n                id: uuid.v4(),\r\n                title: 'Business Website',\r\n                category: 'Web Design'\r\n            },\r\n            {\r\n                id: uuid.v4(),\r\n                title: 'Social App',\r\n                category: 'Mobile Development'\r\n            },\r\n            {\r\n                id: uuid.v4(),\r\n                title: 'Contact Form',\r\n                category: 'Web Development'\r\n            }\r\n        ]});\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.getProjects();\r\n        this.getToDos();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getToDos();\r\n    }\r\n\r\n    handleAddProject(project){\r\n        let projects = this.state.projects;\r\n        projects.push(project);\r\n        this.setState({projects:projects});\r\n    }\r\n\r\n    handleDeleteProject(id){\r\n        let projects = this.state.projects;\r\n        let index = projects.findIndex(x => x.id === id);\r\n        projects.splice(index, 1);\r\n        this.setState({projects:projects});\r\n    }\r\n\r\n    render() {\r\n    console.log(this.props);\r\n    return (\r\n      <div className=\"App\">\r\n        <AddProject addProject={this.handleAddProject.bind(this)} />\r\n        <Projects projects={this.state.projects} onDelete={this.handleDeleteProject.bind(this)} />\r\n        <hr />\r\n        <Todos />\r\n        <img src={logo} className=\"App-logo\" />\r\n      </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}